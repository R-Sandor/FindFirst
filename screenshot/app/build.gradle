/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.9/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.8.10' // Adjust the Kotlin version as needed
    id 'org.jetbrains.kotlin.plugin.spring' version '1.8.10' // For Spring support
    id 'org.springframework.boot' version '3.2.4' // Adjust the Spring Boot version as needed
    id 'io.spring.dependency-management' version '1.1.0' // For dependency management
    id 'org.sonarqube' version '5.3.1'
    id 'jacoco'
    id 'application'
    id "com.diffplug.spotless" version "6.19.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)

    annotationProcessor 'org.projectlombok:lombok'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.34'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.2.0'
    implementation group: 'com.microsoft.playwright', name: 'playwright', version: '1.41.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
}


spotless {
  // optional: limit format enforcement to just the files changed by this feature branch
  //ratchetFrom 'origin/main'

  format 'misc', {
    // define the files to apply `misc` to
    target '*.gradle', '*.md', '.gitignore'
    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
    encoding 'UTF-8'
  }

  java {
    // optional: you can specify import groups directly
    // note: you can use an empty string for all the imports you didn't specify explicitly, and '\\#` prefix for static imports
    importOrder('java', 'jakarta', 'dev.findfirst')
    // optional: instead of specifying import groups directly you can specify a config file
    // export config file: https://github.com/diffplug/spotless/blob/main/ECLIPSE_SCREENSHOTS.md#creating-spotlessimportorder

    removeUnusedImports()

    // Choose one of these formatters.
    eclipse().configFile("eclipse-java-google-style.xml")

    formatAnnotations()  // fixes formatting of type annotations, see below

    //licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
  }
}

jacoco {
    toolVersion = '0.8.12'
    reportsDirectory = layout.buildDirectory.dir('reports')
}

tasks.test {
    systemProperty 'spring.profiles.active', 'test'
    finalizedBy(tasks.jacocoTestReport) // report is always generated after tests run
    useJUnitPlatform()
    testLogging.showStandardStreams = true
}

tasks.jacocoTestReport {
    dependsOn(tasks.test) // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = true
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

sonar {
    properties {
        property('sonar.projectKey', 'findfirst_screenshot')
        property('sonar.organization', 'findfirst')
        property('sonar.host.url', 'https://sonarcloud.io')
    }
}

application {
    // Define the main class for the application.
    mainClass = 'dev.findfirst.screenshot.FindFirstScreenshot'
}
